#!/bin/bash

# Always run from project root.
# `docker-scripts/setup`

set -e
# Code that will stop script on a non-zero (non-successful) exit code. (aka. executing in an exception-like style)

# $0: First argument to the script. If ran as "./docker-scripts/install", then that is the first argument.
# dirname $0: This transforms a path such as "./docker-scripts/install" into "install" (or "install" into ".")
#
SCRIPT_BASE=$(dirname "$0")
echo Script Base: $SCRIPT_BASE

# This import requires the script be ran at project root.
source $SCRIPT_BASE/utils

# Successfully goes up one directory to project root with util function
ROOT=$(resolve_path "$SCRIPT_BASE/..")
echo testing relative paths to absolute: $ROOT

POSITIONAL=()

skip_install=
skip_db=

# Detailed: While the number of arguments ($#) is greater than (-gt) 0
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        --skip-install)
            skip_install=1
            ;;
        --skip-db)
            skip_db=1
            ;;
        -h|--help|?)
            echo "Install Docker and build images."
            echo
            cecho "Usage: $(basename $0) <options> [SERVICE...]" normal
            echo
            echo "Options:"
            echo "      --skip-install  Skip Docker install, just build"
            echo "      --skip-db       Skip database restore script"
            echo "  -h  --help          This help message"
            exit 0
            ;;
        *)
            POSITIONAL+=("$1")
            ;;
    esac
    shift 1
    # (Summary) Shift positional arguments by one, getting rid of the firstmost argument
    #
    # Shift details (from `man bash`)
    # ---
    # Description:
    # - The positional parameters from n+1 ... are renamed to $1 ....
    #
    # Guidelines:
    # - n must be a non-negative number less than or equal to $#.
    # - If n is 0, no parameters are changed.
    # - If n is not given, it is assumed to be 1.
    # - If n is greater than $#, the positional parameters are  not  changed.
    # - The return status is greater than zero if n is greater than $# or less than zero; otherwise 0.
done
# dash dash here means no longer consider the next values as "options" (to the command)
# ie. if a positional argument is -z, then it will be passed directly to set.
set -- "${POSITIONAL[@]}"

echo ARG0 test $0
echo ARG1 test $1
echo ARG2 test $2
echo ARG3 test $3
# access values in array: ${array[@]}
echo Set test "${POSITIONAL[@]}"

if [ ! "$skip_install" ]; then
    case $(detect_platform) in
        Debian)
            cecho "Installing Docker..." blue
            $SCRIPT_BASE/setup_docker --use-existing
            ;;
    esac
else
    cecho "Skipping installation of docker ('setup_docker' script)." green bold
    cecho "'--skip-install' argument provided." green bold
fi

echo
cecho "Building images..." blue
docker-compose build

echo
if [ ! "$skip_db" ]; then
    cecho "Populating database..." blue
    $SCRIPT_BASE/restore_db -y
else
    cecho "Skipping repopulation of database ('restore_db' script)." green bold
    cecho "'--skip-db' argument provided." green bold
fi
