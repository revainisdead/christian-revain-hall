#FROM node:8.8.1 as static
#
#RUN yarn global add npm@5.5.1
#RUN npm install -g lerna@2.5.1
#WORKDIR /srv/app
#RUN chown node.node /srv/app
#COPY --chown=node:node shared shared
#COPY --chown=node:node client client
#COPY --chown=node:node server/locale server/locale
#WORKDIR shared
#USER node
#RUN npm run lerna -- bootstrap

# Using docker multi-stage, layered builds, you can pull from multiple public images
#
# Docker docs: https://docs.docker.com/develop/develop-images/multistage-build/
# SO: https://stackoverflow.com/questions/39626579/is-there-a-way-to-combine-docker-images-into-1-container
#
# Official Python Image: https://hub.docker.com/layers/python/library/python/3.6-stretch/images/sha256-d6c4d3276e3c776590663faa5e6693d894b4747e7aa3776da38722e312e2ea37?context=explore
FROM python:3.8.10

RUN adduser --uid 1000 --gecos --quiet --disabled-password crh

ENV DJANGO_SETTINGS_MODULE=server.app.settings
#    DEBUG=false \
#    SERVE_MEDIA=false \
#    EDITOR=vim

RUN apt-get update && apt-get -y install \
    # CA Cert Tools
    software-properties-common \
    build-essential \
    vim \
    git \
    python-dev \
    default-libmysqlclient-dev \
    libffi-dev \
    libxml2-dev \
    libxslt1-dev \
    # PDF generation
    #libfontconfig1 \
    #libfontconfig1-dev \
    #wkhtmltopdf \
    #xvfb \
    # Image manipulation / Pillow
    zlib1g-dev \
    libpq-dev \
    libcairo2-dev \
    libpango1.0-0 \
    libgdk-pixbuf2.0-0 \
    shared-mime-info \
    libjpeg-dev \
    # geodjango
    #binutils \
    #libproj-dev \
    #gdal-bin \
    #python-gdal \
    # install django_auth_ldap requirements
    libldap2-dev \
    libsasl2-dev  \
    gettext \
    #telnet \
    # cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip install --upgrade pip


RUN mkdir /srv/app
WORKDIR /srv/app
COPY server server

WORKDIR /srv/app/server

ENV CUSTOM_COMPILE_COMMAND="DO NOT EDIT THIS FILE! Instead, edit the \*requirements.in file(s), then run docker-scripts/update_requirements"

ARG PIP_TOOLS_DEV_REQUIREMENTS_IN_FILES
ARG PIP_TOOLS_DEV_REQUIREMENTS_OUTFILE

RUN touch $PIP_TOOLS_DEV_REQUIREMENTS_IN_FILES
RUN pip-compile requirements.in
RUN pip-compile $PIP_TOOLS_DEV_REQUIREMENTS_IN_FILES --output-file ./$PIP_TOOLS_DEV_REQUIREMENTS_OUTFILE
RUN pip-sync requirements.txt $PIP_TOOLS_DEV_REQUIREMENTS_OUTFILE \
    && rm -r ~/.cache/

COPY --chown=crh:crh --from=static /srv/app/static static

WORKDIR /srv/app/server
USER crh

LABEL app="crh"

# vim:set ft=dockerfile:
